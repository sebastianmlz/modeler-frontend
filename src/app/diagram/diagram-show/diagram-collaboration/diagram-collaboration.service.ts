import { Injectable, OnDestroy } from '@angular/core';
import { Observable, Subject, BehaviorSubject } from 'rxjs';
import { tap } from 'rxjs/operators';
import { DiagramCollabEvent } from '../../diagram-collab-event.model';

@Injectable({ providedIn: 'root' })
export class DiagramCollaborationService implements OnDestroy {
  private socket: WebSocket | null = null;
  private eventsSubject = new Subject<DiagramCollabEvent>();
  private statusSubject = new BehaviorSubject<'disconnected' | 'connecting' | 'connected'>('disconnected');
  private windowId = Math.random().toString(36).substr(2, 9); // Unique window identifier

  events$: Observable<DiagramCollabEvent> = this.eventsSubject.asObservable().pipe(
    tap((event: DiagramCollabEvent) => {
      console.log(`[WebSocket-${this.windowId}] üéØ OBSERVABLE EMITIENDO EVENTO:`, event);
      console.log(`[WebSocket-${this.windowId}] üéØ N√∫mero de subscribers activos:`, (this.eventsSubject as any).observers?.length || 'unknown');
    })
  );
  status$: Observable<'disconnected' | 'connecting' | 'connected'> = this.statusSubject.asObservable();

  connect(diagramId: string, token?: string) {
    console.log(`[WebSocket-${this.windowId}] üöÄ INICIANDO CONEXI√ìN PARA VENTANA ${this.windowId}`);
    if (this.socket) {
      console.log(`[WebSocket-${this.windowId}] üîÑ Desconectando socket anterior...`);
      this.disconnect();
    }
    this.statusSubject.next('connecting');
    console.log(`[WebSocket-${this.windowId}] üöÄ CONECTANDO A DIAGRAMA:`, diagramId);
    
    // Construye la URL del WebSocket (ajusta host/puerto seg√∫n entorno)
    let wsUrl = `ws://${window.location.hostname}:8000/ws/diagram/${diagramId}/`;
    if (token) {
      wsUrl += `?token=${token}`;
    }
    console.log(`[WebSocket-${this.windowId}] üåê URL de conexi√≥n:`, wsUrl);
    
    try {
      this.socket = new WebSocket(wsUrl);
      console.log('[WebSocket] üîó Socket creado, esperando conexi√≥n...');
      
      this.socket.onopen = () => {
        console.log(`[WebSocket-${this.windowId}] ‚úÖ CONEXI√ìN ESTABLECIDA EXITOSAMENTE`);
        console.log(`[WebSocket-${this.windowId}] ‚úÖ Socket ready state:`, this.socket?.readyState);
        this.statusSubject.next('connected');
      };
      
      this.socket.onclose = (event) => {
        console.warn(`[WebSocket-${this.windowId}] ‚ùå CONEXI√ìN CERRADA`);
        console.warn(`[WebSocket-${this.windowId}] ‚ùå Close code:`, event.code);
        console.warn(`[WebSocket-${this.windowId}] ‚ùå Close reason:`, event.reason);
        console.warn(`[WebSocket-${this.windowId}] ‚ùå Was clean:`, event.wasClean);
        this.statusSubject.next('disconnected');
      };
      
      this.socket.onerror = (error) => {
        console.error(`[WebSocket-${this.windowId}] üí• ERROR DE CONEXI√ìN:`, error);
        console.error(`[WebSocket-${this.windowId}] üí• Socket state:`, this.socket?.readyState);
        this.statusSubject.next('disconnected');
      };
      
      this.socket.onmessage = (event) => {
        console.log(`[WebSocket-${this.windowId}] ÔøΩ MENSAJE RECIBIDO RAW:`, event.data);
        try {
          const data = JSON.parse(event.data);
          console.log(`[WebSocket-${this.windowId}] ÔøΩ DATOS PARSEADOS:`, data);
          console.log(`[WebSocket-${this.windowId}] ÔøΩ Tipo de evento:`, data.type);
          console.log(`[WebSocket-${this.windowId}] ÔøΩ DiagramId del evento:`, data.diagramId);
          
          if (data.type && data.payload !== undefined) {
            console.log(`[WebSocket-${this.windowId}] ‚úÖ EMITIENDO EVENTO A COMPONENTE:`, data);
            this.eventsSubject.next(data as DiagramCollabEvent);
            console.log(`[WebSocket-${this.windowId}] ‚úÖ Evento emitido exitosamente`);
          } else {
            console.warn('[WebSocket] ‚ö†Ô∏è Evento inv√°lido recibido (falta type o payload):', data);
          }
        } catch (error) {
          console.error('[WebSocket] üí• ERROR AL PARSEAR MENSAJE:', error);
          console.error('[WebSocket] üí• Mensaje original:', event.data);
        }
      };
      
    } catch (error) {
      console.error('[WebSocket] üí• ERROR AL CREAR SOCKET:', error);
      this.statusSubject.next('disconnected');
    }
  }

  sendEvent(event: DiagramCollabEvent) {
    console.log(`[WebSocket-${this.windowId}] üì§ INTENTANDO ENVIAR EVENTO:`, event);
    console.log(`[WebSocket-${this.windowId}] üì§ Tipo de evento:`, event.type);
    console.log(`[WebSocket-${this.windowId}] üì§ DiagramId del evento:`, event.diagramId);
    console.log(`[WebSocket-${this.windowId}] üì§ Estado actual del socket:`, this.socket?.readyState);
    console.log(`[WebSocket-${this.windowId}] üì§ Estados: CONNECTING=0, OPEN=1, CLOSING=2, CLOSED=3`);
    
    if (this.socket && this.socket.readyState === WebSocket.OPEN) {
      // SOLUCI√ìN: Agregar windowId al evento para identificar el origen
      const eventWithSender = {
        ...event,
        senderId: this.windowId
      };
      
      const eventJson = JSON.stringify(eventWithSender);
      console.log(`[WebSocket-${this.windowId}] üì§ ENVIANDO EVENTO JSON:`, eventJson);
      console.log(`[WebSocket-${this.windowId}] üì§ Longitud del mensaje:`, eventJson.length);
      console.log(`[WebSocket-${this.windowId}] üì§ Sender ID incluido:`, this.windowId);
      
      try {
        this.socket.send(eventJson);
        console.log(`[WebSocket-${this.windowId}] ‚úÖ EVENTO ENVIADO EXITOSAMENTE`);
      } catch (error) {
        console.error(`[WebSocket-${this.windowId}] üí• ERROR AL ENVIAR:`, error);
      }
    } else {
      console.error(`[WebSocket-${this.windowId}] ‚ùå NO SE PUEDE ENVIAR EVENTO`);
      console.error(`[WebSocket-${this.windowId}] ‚ùå Socket existe:`, !!this.socket);
      console.error(`[WebSocket-${this.windowId}] ‚ùå Estado del socket:`, this.socket?.readyState);
      console.error(`[WebSocket-${this.windowId}] ‚ùå ¬øEs OPEN?:`, this.socket?.readyState === WebSocket.OPEN);
      
      if (this.socket) {
        switch (this.socket.readyState) {
          case WebSocket.CONNECTING:
            console.error(`[WebSocket-${this.windowId}] ‚ùå Socket a√∫n CONECTANDO...`);
            break;
          case WebSocket.CLOSING:
            console.error(`[WebSocket-${this.windowId}] ‚ùå Socket CERR√ÅNDOSE...`);
            break;
          case WebSocket.CLOSED:
            console.error(`[WebSocket-${this.windowId}] ‚ùå Socket CERRADO`);
            break;
          default:
            console.error(`[WebSocket-${this.windowId}] ‚ùå Estado desconocido:`, this.socket.readyState);
        }
      } else {
        console.error(`[WebSocket-${this.windowId}] ‚ùå Socket es NULL`);
      }
    }
  }

  disconnect() {
    if (this.socket) {
      this.socket.close();
      this.socket = null;
      this.statusSubject.next('disconnected');
    }
  }

  ngOnDestroy() {
    this.disconnect();
  }
}
